{
	"title": "Chapter 5: Methods",
	"questions": [
    	{
        	"number": 1,
        	"title": "Which statements about the final modifier are correct? (Choose all that apply.)",
        	"code": null,
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "Instance and static variables can be marked final" },
            	{ "id": "B", "text": "A variable is effectively final only if it is marked final" },
            	{ "id": "C", "text": "An object that is marked final cannot be modified" },
            	{ "id": "D", "text": "Local variables cannot be declared with type var and the final modifier" },
            	{ "id": "E", "text": "A primitive that is marked final cannot be modified" }
            ],
        	"answer": {
            	"ids": ["E","A"],
            	"explanation": "Instance and static variables can be marked final, making option A correct. Effectively final means a local variable is not marked final but whose value does not change after it is set, making option B incorrect. Option C is incorrect, as final refers only to the reference to an object, not its contents. Option D is incorrect, as var and final can be used together. Finally, option E is correct: once a primitive is marked final, it cannot be modified."
            }
        },
    	{
        	"number": 2,
        	"title": "Which of the following can fill in the blank in this code to make it compile? (Choose all that apply.)",
        	"code": "public class Ant {\n  _______ void method() {}\n}",
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "default" },
            	{ "id": "B", "text": "final" },
            	{ "id": "C", "text": "private" },
            	{ "id": "D", "text": "Public" },
            	{ "id": "E", "text": "String" },
            	{ "id": "F", "text": "zzz:" }
            ],
        	"answer": {
            	"ids": ["B","C"],
            	"explanation": "The keyword void is a return type. Only the access modifier or optional specifiers are allowed before the return type. Option C is correct, creating a method with private access. Option B is also correct, creating a method with package access and the optional specifier final. Since package access does not use a modifier, we get to jump right to final. Option A is incorrect because package access omits the access modifier rather than specifying default. Option D is incorrect because Java is case sensitive. It would have been correct if public were the choice. Option E is incorrect because the method already has a void return type. Option F is incorrect because labels are not allowed for methods."
            }
        },
    	{
        	"number": 3,
        	"title": "Which of the following methods compile? (Choose all that apply.)",
        	"code": null,
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "final static void rain() {}" },
            	{ "id": "B", "text": "public final int void snow() {}" },
            	{ "id": "C", "text": "private void int hail() {}" },
            	{ "id": "D", "text": "static final void sleet() {}" },
            	{ "id": "E", "text": "void final ice() {}" },
            	{ "id": "F", "text": "void public slush() {}" }
            ],
        	"answer": {
            	"ids": ["A","D"],
            	"explanation": "Options A and D are correct because the optional specifiers are allowed in any order. Options B and C are incorrect because they each have two return types. Options E and F are incorrect because the return type is before the optional specifier and access modifier, respectively."
            }
        },
    	{
        	"number": 4,
        	"title": "Which of the following can fill in the blank and allow the code to compile? (Choose all that apply.)",
        	"code": "final _______ song = 6;",
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "int" },
            	{ "id": "B", "text": "Integer" },
            	{ "id": "C", "text": "long" },
            	{ "id": "D", "text": "Long" },
            	{ "id": "E", "text": "double" },
            	{ "id": "F", "text": "Double" }
            ],
        	"answer": {
            	"ids": ["B","E","C","A"],
            	"explanation": "The value 6 can be implicitly promoted to any of the primitive types, making options A, C, and E correct. It can also be autoboxed to Integer, making option B correct. It cannot be both promoted and autoboxed, making options D and F incorrect."
            }
        },
    	{
        	"number": 5,
        	"title": "Which of the following methods compile? (Choose all that apply.)",
        	"code": null,
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "public void january() { return; }" },
            	{ "id": "B", "text": "public int february() { return null;}" },
            	{ "id": "C", "text": "public void march() {}" },
            	{ "id": "D", "text": "public int april() { return 9;}" },
            	{ "id": "E", "text": "public int may() { return 9.0;}" },
            	{ "id": "F", "text": "public int june() { return;}" }
            ],
        	"answer": {
            	"ids": ["D","C","A"],
            	"explanation": "Options A and C are correct because a void method is optionally allowed to have a return statement as long as it doesn't try to return a value. Option B does not compile because null requires a reference object as the return type. Since int is primitive, it is not a reference object. Option D is correct because it returns an int value. Option E does not compile because it tries to return a double when the return type is int. Since a double cannot be assigned to an int, it cannot be returned as one either. Option F does not compile because no value is actually returned."
            }
        },
    	{
        	"number": 6,
        	"title": "Which of the following methods compile? (Choose all that apply.)",
        	"code": null,
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "public void violin(int… nums) {}" },
            	{ "id": "B", "text": "public void viola(String values, int… nums) {}" },
            	{ "id": "C", "text": "public void cello(int… nums, String values) {}" },
            	{ "id": "D", "text": "public void bass(String… values, int… nums) {}" },
            	{ "id": "E", "text": "public void flute(String[] values, …int nums) {}" },
            	{ "id": "F", "text": "public void oboe(String[] values, int[] nums) {}" }
            ],
        	"answer": {
            	"ids": ["B","A","F"],
            	"explanation": "Options A and B are correct because the single varargs parameter is the last parameter declared. Option F is correct because it doesn't use any varargs parameters. Option C is incorrect because the varargs parameter is not last. Option D is incorrect because two varargs parameters are not allowed in the same method. Option E is incorrect because the … for a varargs must be after the type, not before it."
            }
        },
    	{
        	"number": 7,
        	"title": "Given the following method, which of the method calls return 2? (Choose all that apply.)",
        	"code": "public int juggle(boolean b, boolean… b2) {\n   return b2.length;\n}",
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "juggle();" },
            	{ "id": "B", "text": "juggle(true);" },
            	{ "id": "C", "text": "juggle(true, true);" },
            	{ "id": "D", "text": "juggle(true, true, true);" },
            	{ "id": "E", "text": "juggle(true, {true, true});" },
            	{ "id": "F", "text": "juggle(true, new boolean[2]);" }
            ],
        	"answer": {
            	"ids": ["F","D"],
            	"explanation": "Option D passes the initial parameter plus two more to turn into a varargs array of size 2. Option F passes the initial parameter plus an array of size 2. Option A does not compile because it does not pass the initial parameter. Option E does not compile because it does not declare an array properly. It should be new boolean[] {true, true}. Option B creates a varargs array of size 0, and option C creates a varargs array of size 1."
            }
        },
    	{
        	"number": 8,
        	"title": "Which of the following statements is correct?",
        	"code": null,
        	"multipleOptions": false,
            "options": [
            	{ "id": "A", "text": "Package access is more lenient than protected access" },
            	{ "id": "B", "text": "A public class that has private fields and package methods is not visible to classes outside the package" },
            	{ "id": "C", "text": "You can use access modifiers so only some of the classes in a package see a particular package class" },
            	{ "id": "D", "text": "You can use access modifiers to allow access to all methods and not any instance variables" },
            	{ "id": "E", "text": "You can use access modifiers to restrict access to all classes that begin with the word Test" }
            ],
        	"answer": {
            	"ids": ["D"],
            	"explanation": "Option D is correct. A common practice is to set all fields to be private and all methods to be public. Option A is incorrect because protected access allows everything that package access allows and additionally allows subclasses access. Option B is incorrect because the class is public. This means that other classes can see the class. However, they cannot call any of the methods or read any of the fields. It is essentially a useless class. Option C is incorrect because package access applies to the whole package. Option E is incorrect because Java has no such wildcard access capability."
            }
        },
    	{
        	"number": 9,
        	"title": "Given the following class definitions, which lines in the main() method generate a compiler error? (Choose all that apply.)",
        	"code": "// Classroom.java\npackage my.school;\npublic class Classroom {\n   private int roomNumber;\n   protected static String teacherName;\n   static int globalKey = 54321;\n   public static int floor = 3;\n   Classroom(int r, String t) {\n      roomNumber = r;\n      teacherName = t; } }\n \n// School.java\n1: package my.city;\n2: import my.school.*;\n3: public class School {\n4:    public static void main(String[] args) {\n5:       System.out.println(Classroom.globalKey);\n6:       Classroom room = new Classroom(101, \"Mrs. Anderson\");\n7:       System.out.println(room.roomNumber);\n8:       System.out.println(Classroom.floor);\n9:       System.out.println(Classroom.teacherName); } }",
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "None: the code compiles fine" },
            	{ "id": "B", "text": "Line 5" },
            	{ "id": "C", "text": "Line 6" },
            	{ "id": "D", "text": "Line 7" },
            	{ "id": "E", "text": "Line 8" },
            	{ "id": "F", "text": "Line 9" }
            ],
        	"answer": {
            	"ids": ["C","D","F","B"],
            	"explanation": "The two classes are in different packages, which means private access and package access will not compile. This causes compiler errors on lines 5, 6, and 7, making options B, C, and D correct answers. Additionally, protected access will not compile since School does not inherit from Classroom. This causes the compiler error on line 9, making option F a correct answer as well."
            }
        },
    	{
        	"number": 10,
        	"title": "What is the output of executing the Chimp program?",
        	"code": "// Rope.java\n1: package rope;\n2: public class Rope {\n3:    public static int LENGTH = 5;\n4:    static { \n5:       LENGTH = 10;\n6:    }\n7:    public static void swing() {\n8:       System.out.print(\"swing \");\n9:    } }\n \n// Chimp.java\n1: import rope.*;\n2: import static rope.Rope.*;\n3: public class Chimp {\n4:    public static void main(String[] args) {\n5:       Rope.swing();\n6:       new Rope().swing();\n7:       System.out.println(LENGTH);\n8:    } }",
        	"multipleOptions": false,
        	"options": [
            	{ "id": "A", "text": "swing swing 5" },
            	{ "id": "B", "text": "swing swing 10" },
            	{ "id": "C", "text": "Compiler error on line 2 of Chimp" },
            	{ "id": "D", "text": "Compiler error on line 5 of Chimp" },
            	{ "id": "E", "text": "Compiler error on line 6 of Chimp" },
            	{ "id": "F", "text": "Compiler error on line 7 of Chimp" }
            ],
        	"answer": {
            	"ids": ["B"],
            	"explanation": "Rope runs line 3, setting LENGTH to 5, and then immediately after that runs the static initializer, which sets it to 10. Line 5 in the Chimp class calls the static method normally and prints swing and a space. Line 6 also calls the static method. Java allows calling a static method through an instance variable, although it is not recommended. Line 7 uses the static import on line 2 to reference LENGTH. For these reasons, option B is correct."
            }
        },
    	{
        	"number": 11,
        	"title": "Which statements are true of the following code? (Choose all that apply.)",
        	"code": "1:  public class Rope {\n2:     public static void swing() {\n3:        System.out.print(\"swing\");\n4:     }\n5:     public void climb() {\n6:        System.out.println(\"climb\");\n7:     }\n8:     public static void play() {\n9:        swing();\n10:       climb();\n11:    }\n12:    public static void main(String[] args) {\n13:       Rope rope = new Rope();\n14:       rope.play();\n15:       Rope rope2 = null;\n16:       System.out.print(\"-\");\n17:       rope2.play();\n18:    } }",
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "The code compiles as is" },
            	{ "id": "B", "text": "There is exactly one compiler error in the code" },
            	{ "id": "C", "text": "There are exactly two compiler errors in the code" },
            	{ "id": "D", "text": "If the line(s) with compiler errors are removed, the output is swing-climb" },
            	{ "id": "E", "text": "If the line(s) with compiler errors are removed, the output is swing-swing" },
            	{ "id": "F", "text": "If the line(s) with compile errors are removed, the code throws a NullPointerException" }
            ],
        	"answer": {
            	"ids": ["E","B"],
            	"explanation": "Line 10 does not compile because static methods are not allowed to call instance methods. Even though we are calling play() as if it were an instance method and an instance exists, Java knows play() is really a static method and treats it as such. Since this is the only line that does not compile, option B is correct. If line 10 is removed, the code prints swing-swing, making option E correct. It does not throw a NullPointerException on line 17 because play() is a static method. Java looks at the type of the reference for rope2 and translates the call to Rope.play()."
            }
        },
    	{
        	"number": 12,
        	"title": "How many variables in the following method are effectively final?",
        	"code": "10: public void feed() {\n11:    int monkey = 0;\n12:    if(monkey > 0) {\n13:       var giraffe = monkey++;\n14:       String name;\n15:       name = \"geoffrey\";\n16:    }17:    String name = \"milly\";\n18:    var food = 10;\n19:    while(monkey <= 10) {\n20:       food = 0;\n21:    }\n22:    name = null;\n23: }",
        	"multipleOptions": false,
        	"options": [
            	{ "id": "A", "text": "1" },
            	{ "id": "B", "text": "2" },
            	{ "id": "C", "text": "3" },
            	{ "id": "D", "text": "4" },
            	{ "id": "E", "text": "5" },
            	{ "id": "F", "text": "None of the above. The code does not compile" }
            ],
        	"answer": {
            	"ids": ["B"],
            	"explanation": "The test for effectively final is if the final modifier can be added to the local variable and the code still compiles. The monkey variable declared on line 11 is not effectively final because it is modified on line 13. The giraffe and name variables declared on lines 13 and 14, respectively, are effectively final and not modified after they are set. The name variable declared on line 17 is not effectively final since it is modified on line 22. Finally, the food variable on line 18 is not effectively final since it is modified on line 20. Since there are two effectively final variables, option B is correct."
            }
        },
    	{
        	"number": 13,
        	"title": "What is the output of the following code?",
        	"code": "// RopeSwing.java\nimport rope.*;\nimport static rope.Rope.*;\npublic class RopeSwing {\n   private static Rope rope1 = new Rope();\n   private static Rope rope2 = new Rope();\n   {\n      System.out.println(rope1.length);\n   }\n   public static void main(String[] args) {\n      rope1.length = 2;\n      rope2.length = 8;\n      System.out.println(rope1.length);\n   }\n}\n \n// Rope.java\npackage rope;\npublic class Rope {\n   public static int length = 0;\n}",
        	"multipleOptions": false,
        	"options": [
            	{ "id": "A", "text": "02" },
            	{ "id": "B", "text": "08" },
            	{ "id": "C", "text": "2" },
            	{ "id": "D", "text": "8" },
            	{ "id": "E", "text": "The code does not compile" },
            	{ "id": "F", "text": "An exception is thrown" }
            ],
        	"answer": {
            	"ids": ["D"],
            	"explanation": "There are two details to notice in this code. First, note that RopeSwing has an instance initializer and not a static initializer. Since RopeSwing is never constructed, the instance initializer does not run. The other detail is that length is static. Changes from any object update this common static variable. The code prints 8, making option D correct."
            }
        },
    	{
        	"number": 14,
        	"title": "How many lines in the following code have compiler errors?",
        	"code": "1:  public class RopeSwing {\n2:     private static final String leftRope;\n3:     private static final String rightRope;\n4:     private static final String bench;\n5:     private static final String name = \"name\";\n6:     static {\n7:        leftRope = \"left\";\n8:        rightRope = \"right\";\n9:     }\n10:    static {\n11:       name = \"name\";\n12:       rightRope = \"right\";\n13:    }\n14:    public static void main(String[] args) {\n15:       bench = \"bench\";\n16:    }\n17: }",
        	"multipleOptions": false,
        	"options": [
            	{ "id": "A", "text": "0" },
            	{ "id": "B", "text": "1" },
            	{ "id": "C", "text": "2" },
            	{ "id": "D", "text": "3" },
            	{ "id": "E", "text": "4" },
            	{ "id": "F", "text": "5" }
            ],
        	"answer": {
            	"ids": ["E"],
            	"explanation": "If a variable is static final, it must be set exactly once, and it must be in the declaration line or in a static initialization block. Line 4 doesn't compile because bench is not set in either of these locations. Line 15 doesn't compile because final variables are not allowed to be set after that point. Line 11 doesn't compile because name is set twice: once in the declaration and again in the static block. Line 12 doesn't compile because rightRope is set twice as well. Both are in static initialization blocks. Since four lines do not compile, option E is correct."
            }
        },
    	{
        	"number": 15,
        	"title": "Which of the following can replace line 2 to make this code compile? (Choose all that apply.)",
        	"code": "1: import java.util.*;\n2: // INSERT CODE HERE\n3: public class Imports {\n4:    public void method(ArrayList<String> list) {\n5:       sort(list);\n6:    }\n7: }",
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "import static java.util.Collections;" },
            	{ "id": "B", "text": "import static java.util.Collections.*;" },
            	{ "id": "C", "text": "import static java.util.Collections.sort(ArrayList<String>);" },
            	{ "id": "D", "text": "static import java.util.Collections;" },
            	{ "id": "E", "text": "static import java.util.Collections.*;" },
            	{ "id": "F", "text": "static import java.util.Collections.sort(ArrayList<String>);" }
            ],
        	"answer": {
            	"ids": ["B"],
            	"explanation": "The two valid ways to do this are import static java.util.Collections.*; and import static java.util.Collections.sort;. Option A is incorrect because you can do a static import only on static members. Classes such as Collections require a regular import. Option C is nonsense as method parameters have no business in an import. Options D, E, and F try to trick you into reversing the syntax of import static."
            }
        },
    	{
        	"number": 16,
        	"title": "What is the result of the following statements?",
        	"code": "1:  public class Test {\n2:     public void print(byte x) {\n3:        System.out.print(\"byte-\");\n4:     }\n5:     public void print(int x) {\n6:        System.out.print(\"int-\");\n7:     }\n8:     public void print(float x) {\n9:        System.out.print(\"float-\");10:    }\n11:    public void print(Object x) {\n12:       System.out.print(\"Object-\");\n13:    }\n14:    public static void main(String[] args) {\n15:       Test t = new Test();\n16:       short s = 123;\n17:       t.print(s);\n18:       t.print(true);\n19:       t.print(6.789);\n20:    }\n21: }",
        	"multipleOptions": false,
        	"options": [
            	{ "id": "A", "text": "byte-float-Object-" },
            	{ "id": "B", "text": "int-float-Object-" },
            	{ "id": "C", "text": "byte-Object-float-" },
            	{ "id": "D", "text": "int-Object-float-" },
            	{ "id": "E", "text": "int-Object-Object-" },
            	{ "id": "F", "text": "byte-Object-Object-" }
            ],
        	"answer": {
            	"ids": ["E"],
            	"explanation": "The argument on line 17 is a short. It can be promoted to an int, so print() on line 5 is invoked. The argument on line 18 is a boolean. It can be autoboxed to a Boolean, so print() on line 11 is invoked. The argument on line 19 is a double. It can be autoboxed to a Double, so print() on line 11 is invoked. Therefore, the output is int-Object-Object-, and the correct answer is option E."
            }
        },
    	{
        	"number": 17,
        	"title": "What is the result of the following program?",
        	"code": "1:  public class Squares {\n2:     public static long square(int x) {\n3:        var y = x * (long) x;\n4:        x = -1;\n5:        return y;\n6:     }\n7:     public static void main(String[] args) {\n8:        var value = 9;\n9:        var result = square(value);\n10:       System.out.println(value);\n11:    } }",
        	"multipleOptions": false,
        	"options": [
            	{ "id": "A", "text": "-1" },
            	{ "id": "B", "text": "9" },
            	{ "id": "C", "text": "81" },
            	{ "id": "D", "text": "Compiler error on line 9" },
            	{ "id": "E", "text": "Compiler error on a different line" }
            ],
        	"answer": {
            	"ids": ["B"],
            	"explanation": "Since Java is pass-by-value and the variable on line 8 never gets reassigned, it stays as 9. In the method square, x starts as 9. The y value becomes 81, and then x gets set to –1. Line 9 does set result to 81. However, we are printing out value, and that is still 9, making option B correct."
            }
        },
    	{
        	"number": 18,
        	"title": "Which of the following are output by the following code? (Choose all that apply.)",
        	"code": "public class StringBuilders {\n   public static StringBuilder work(StringBuilder a, \n      StringBuilder b) {\n      a = new StringBuilder(\"a\");\n      b.append(\"b\");\n      return a;\n   }\n   public static void main(String[] args) {\n      var s1 = new StringBuilder(\"s1\");\n      var s2 = new StringBuilder(\"s2\");      var s3 = work(s1, s2);\n      System.out.println(\"s1 = \" + s1);\n      System.out.println(\"s2 = \" + s2);\n      System.out.println(\"s3 = \" + s3);\n   }\n}",
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "s1 = a" },
            	{ "id": "B", "text": "s1 = s1" },
            	{ "id": "C", "text": "s2 = s2" },
            	{ "id": "D", "text": "s2 = s2b" },
            	{ "id": "E", "text": "s3 = a" },
            	{ "id": "F", "text": "The code does not compile" }
            ],
        	"answer": {
            	"ids": ["E","D","B"],
            	"explanation": "Since Java is pass-by-value, assigning a new object to a does not change the caller. Calling append() does affect the caller because both the method parameter and the caller have a reference to the same object. Finally, returning a value does pass the reference to the caller for assignment to s3. For these reasons, options B, D, and E are correct."
            }
        },
    	{
        	"number": 19,
        	"title": "Which of the following will compile when independently inserted in the following code? (Choose all that apply.)",
        	"code": "1:  public class Order3 {\n2:     final String value1 = \"red\";\n3:     static String value2 = \"blue\";\n4:     String value3 = \"yellow\";\n5:     {\n6:        // CODE SNIPPET 1\n7:     }\n8:     static {\n9:        // CODE SNIPPET 2\n10:    } }",
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "Insert at line 6: value1 = \"green\";" },
            	{ "id": "B", "text": "Insert at line 6: value2 = \"purple\";" },
            	{ "id": "C", "text": "Insert at line 6: value3 = \"orange\";" },
            	{ "id": "D", "text": "Insert at line 9: value1 = \"magenta\";" },
            	{ "id": "E", "text": "Insert at line 9: value2 = \"cyan\";" },
            	{ "id": "F", "text": "Insert at line 9: value3 = \"turquoise\";" }
            ],
        	"answer": {
            	"ids": ["E","C","B"],
            	"explanation": "The variable value1 is a final instance variable. It can be set only once: in the variable declaration, an instance initializer, or a constructor. Option A does not compile because the final variable was already set in the declaration. The variable value2 is a static variable. Both instance and static initializers are able to access static variables, making options B and E correct. The variable value3 is an instance variable. Options D and F do not compile because a static initializer does not have access to instance variables."
            }
        },
    	{
        	"number": 20,
        	"title": "Which of the following are true about the following code? (Choose all that apply.)",
        	"code": "public class Run {\n   static void execute() {\n      System.out.print(\"1-\");\n   }\n   static void execute(int num) {\n      System.out.print(\"2-\");\n   }\n   static void execute(Integer num) {\n      System.out.print(\"3-\");\n   }\n   static void execute(Object num) {\n      System.out.print(\"4-\");\n   }\n   static void execute(int… nums) {      System.out.print(\"5-\");\n   }\n   public static void main(String[] args) {\n      Run.execute(100);\n      Run.execute(100L);\n   }\n}",
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "The code prints out 2-4-" },
            	{ "id": "B", "text": "The code prints out 3-4-" },
            	{ "id": "C", "text": "The code prints out 4-2-" },
            	{ "id": "D", "text": "The code prints out 4-4-" },
            	{ "id": "E", "text": "The code prints 3-4- if you remove the method static void execute(int num)" },
            	{ "id": "F", "text": "The code prints 4-4- if you remove the method static void execute(int num)" }
            ],
        	"answer": {
            	"ids": ["E","A"],
            	"explanation": "The 100 parameter is an int and so calls the matching int method, making option A correct. When this method is removed, Java looks for the next most specific constructor. Java prefers autoboxing to varargs, so it chooses the Integer constructor. The 100L parameter is a long. Since it can't be converted into a smaller type, it is autoboxed into a Long, and then the method for Object is called, making option E correct."
            }
        },
    	{
        	"number": 21,
        	"title": "Which method signatures are valid overloads of the following method signature? (Choose all that apply.)",
        	"code": "public void moo(int m, int… n)",
        	"multipleOptions": true,
        	"options": [
            	{ "id": "A", "text": "public void moo(int a, int… b)" },
            	{ "id": "B", "text": "public int moo(char ch)" },
            	{ "id": "C", "text": "public void moooo(int… z)" },
            	{ "id": "D", "text": "private void moo(int… x)" },
            	{ "id": "E", "text": "public void moooo(int y)" },
            	{ "id": "F", "text": "public void moo(int… c, int d)" },
            	{ "id": "G", "text": "public void moo(int… i, int j…)" }
            ],
        	"answer": {
            	"ids": ["B","D"],
            	"explanation": "Option A is incorrect because it has the same parameter list of types and therefore the same signature as the original method. Options B and D are valid method overloads because the types of parameters in the list change. When overloading methods, the return type and access modifiers do not need to be the same. Options C and E are incorrect because the method name is different. OptionsF and G do not compile. There can be at most one varargs parameter, and it must be the last element in the parameter list."
            }
        }
    ]
}
